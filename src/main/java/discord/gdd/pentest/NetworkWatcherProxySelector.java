package discord.gdd.pentest;

import java.io.IOException;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.SocketAddress;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;

import discord.gdd.Main;
import org.bukkit.Bukkit;
import org.bukkit.plugin.Plugin;

public class NetworkWatcherProxySelector extends ProxySelector {

	private final ProxySelector defaultSelector;

	public ProxySelector getDefaultSelector() {
		return defaultSelector;
	}

	public NetworkWatcherProxySelector(ProxySelector defaultSelector) {
		this.defaultSelector = defaultSelector;
	}

	@Override
	public List<Proxy> select(URI uri) {
		if (Bukkit.isPrimaryThread()) {
			Plugin plugin = getRequestingPlugin();
			if (plugin != null) {
				Main.getInstance().getLogger().log(Level.WARNING, "Plugin " + plugin.getName()
						+ " tentou estabelecer conexao em  " + uri + " no thread do servidor principal");
			} else {
				Main.getInstance().getLogger().log(Level.WARNING,
						"Algum plugin tentou acessar " + uri);
				Thread.dumpStack();
			}

		}
		return defaultSelector.select(uri);
	}

	@Override
	public void connectFailed(URI uri, SocketAddress sa, IOException ioe) {
		defaultSelector.connectFailed(uri, sa, ioe);
	}

	private Plugin getRequestingPlugin() {
		HashMap<ClassLoader, Plugin> map = getClassloaderToPluginMap();
		StackTraceElement[] stacktrace = new Exception().getStackTrace();
		for (int i = 0; i < stacktrace.length; i++) {
			StackTraceElement element = stacktrace[i];
			try {
				ClassLoader loader = Class.forName(element.getClassName(), false, getClass().getClassLoader())
						.getClassLoader();
				if (map.containsKey(loader)) {
					return map.get(loader);
				}
			} catch (ClassNotFoundException e) {
			}
		}
		return null;
	}

	private HashMap<ClassLoader, Plugin> getClassloaderToPluginMap() {
		HashMap<ClassLoader, Plugin> map = new HashMap<ClassLoader, Plugin>();
		for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
			map.put(plugin.getClass().getClassLoader(), plugin);
		}
		map.remove(getClass().getClassLoader());
		return map;
	}

}